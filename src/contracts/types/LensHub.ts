/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace Types {
  export type MigrationParamsStruct = {
    lensHandlesAddress: AddressLike;
    tokenHandleRegistryAddress: AddressLike;
    legacyFeeFollowModule: AddressLike;
    legacyProfileFollowModule: AddressLike;
    newFeeFollowModule: AddressLike;
  };

  export type MigrationParamsStructOutput = [
    lensHandlesAddress: string,
    tokenHandleRegistryAddress: string,
    legacyFeeFollowModule: string,
    legacyProfileFollowModule: string,
    newFeeFollowModule: string
  ] & {
    lensHandlesAddress: string;
    tokenHandleRegistryAddress: string;
    legacyFeeFollowModule: string;
    legacyProfileFollowModule: string;
    newFeeFollowModule: string;
  };

  export type PublicationActionParamsStruct = {
    publicationActedProfileId: BigNumberish;
    publicationActedId: BigNumberish;
    actorProfileId: BigNumberish;
    referrerProfileIds: BigNumberish[];
    referrerPubIds: BigNumberish[];
    actionModuleAddress: AddressLike;
    actionModuleData: BytesLike;
  };

  export type PublicationActionParamsStructOutput = [
    publicationActedProfileId: bigint,
    publicationActedId: bigint,
    actorProfileId: bigint,
    referrerProfileIds: bigint[],
    referrerPubIds: bigint[],
    actionModuleAddress: string,
    actionModuleData: string
  ] & {
    publicationActedProfileId: bigint;
    publicationActedId: bigint;
    actorProfileId: bigint;
    referrerProfileIds: bigint[];
    referrerPubIds: bigint[];
    actionModuleAddress: string;
    actionModuleData: string;
  };

  export type EIP712SignatureStruct = {
    signer: AddressLike;
    v: BigNumberish;
    r: BytesLike;
    s: BytesLike;
    deadline: BigNumberish;
  };

  export type EIP712SignatureStructOutput = [
    signer: string,
    v: bigint,
    r: string,
    s: string,
    deadline: bigint
  ] & { signer: string; v: bigint; r: string; s: string; deadline: bigint };

  export type LegacyCollectParamsStruct = {
    publicationCollectedProfileId: BigNumberish;
    publicationCollectedId: BigNumberish;
    collectorProfileId: BigNumberish;
    referrerProfileId: BigNumberish;
    referrerPubId: BigNumberish;
    collectModuleData: BytesLike;
  };

  export type LegacyCollectParamsStructOutput = [
    publicationCollectedProfileId: bigint,
    publicationCollectedId: bigint,
    collectorProfileId: bigint,
    referrerProfileId: bigint,
    referrerPubId: bigint,
    collectModuleData: string
  ] & {
    publicationCollectedProfileId: bigint;
    publicationCollectedId: bigint;
    collectorProfileId: bigint;
    referrerProfileId: bigint;
    referrerPubId: bigint;
    collectModuleData: string;
  };

  export type CommentParamsStruct = {
    profileId: BigNumberish;
    contentURI: string;
    pointedProfileId: BigNumberish;
    pointedPubId: BigNumberish;
    referrerProfileIds: BigNumberish[];
    referrerPubIds: BigNumberish[];
    referenceModuleData: BytesLike;
    actionModules: AddressLike[];
    actionModulesInitDatas: BytesLike[];
    referenceModule: AddressLike;
    referenceModuleInitData: BytesLike;
  };

  export type CommentParamsStructOutput = [
    profileId: bigint,
    contentURI: string,
    pointedProfileId: bigint,
    pointedPubId: bigint,
    referrerProfileIds: bigint[],
    referrerPubIds: bigint[],
    referenceModuleData: string,
    actionModules: string[],
    actionModulesInitDatas: string[],
    referenceModule: string,
    referenceModuleInitData: string
  ] & {
    profileId: bigint;
    contentURI: string;
    pointedProfileId: bigint;
    pointedPubId: bigint;
    referrerProfileIds: bigint[];
    referrerPubIds: bigint[];
    referenceModuleData: string;
    actionModules: string[];
    actionModulesInitDatas: string[];
    referenceModule: string;
    referenceModuleInitData: string;
  };

  export type CreateProfileParamsStruct = {
    to: AddressLike;
    followModule: AddressLike;
    followModuleInitData: BytesLike;
  };

  export type CreateProfileParamsStructOutput = [
    to: string,
    followModule: string,
    followModuleInitData: string
  ] & { to: string; followModule: string; followModuleInitData: string };

  export type ProfileStruct = {
    pubCount: BigNumberish;
    followModule: AddressLike;
    followNFT: AddressLike;
    __DEPRECATED__handle: string;
    __DEPRECATED__imageURI: string;
    __DEPRECATED__followNFTURI: string;
    metadataURI: string;
  };

  export type ProfileStructOutput = [
    pubCount: bigint,
    followModule: string,
    followNFT: string,
    __DEPRECATED__handle: string,
    __DEPRECATED__imageURI: string,
    __DEPRECATED__followNFTURI: string,
    metadataURI: string
  ] & {
    pubCount: bigint;
    followModule: string;
    followNFT: string;
    __DEPRECATED__handle: string;
    __DEPRECATED__imageURI: string;
    __DEPRECATED__followNFTURI: string;
    metadataURI: string;
  };

  export type PublicationMemoryStruct = {
    pointedProfileId: BigNumberish;
    pointedPubId: BigNumberish;
    contentURI: string;
    referenceModule: AddressLike;
    __DEPRECATED__collectModule: AddressLike;
    __DEPRECATED__collectNFT: AddressLike;
    pubType: BigNumberish;
    rootProfileId: BigNumberish;
    rootPubId: BigNumberish;
  };

  export type PublicationMemoryStructOutput = [
    pointedProfileId: bigint,
    pointedPubId: bigint,
    contentURI: string,
    referenceModule: string,
    __DEPRECATED__collectModule: string,
    __DEPRECATED__collectNFT: string,
    pubType: bigint,
    rootProfileId: bigint,
    rootPubId: bigint
  ] & {
    pointedProfileId: bigint;
    pointedPubId: bigint;
    contentURI: string;
    referenceModule: string;
    __DEPRECATED__collectModule: string;
    __DEPRECATED__collectNFT: string;
    pubType: bigint;
    rootProfileId: bigint;
    rootPubId: bigint;
  };

  export type MirrorParamsStruct = {
    profileId: BigNumberish;
    metadataURI: string;
    pointedProfileId: BigNumberish;
    pointedPubId: BigNumberish;
    referrerProfileIds: BigNumberish[];
    referrerPubIds: BigNumberish[];
    referenceModuleData: BytesLike;
  };

  export type MirrorParamsStructOutput = [
    profileId: bigint,
    metadataURI: string,
    pointedProfileId: bigint,
    pointedPubId: bigint,
    referrerProfileIds: bigint[],
    referrerPubIds: bigint[],
    referenceModuleData: string
  ] & {
    profileId: bigint;
    metadataURI: string;
    pointedProfileId: bigint;
    pointedPubId: bigint;
    referrerProfileIds: bigint[];
    referrerPubIds: bigint[];
    referenceModuleData: string;
  };

  export type PostParamsStruct = {
    profileId: BigNumberish;
    contentURI: string;
    actionModules: AddressLike[];
    actionModulesInitDatas: BytesLike[];
    referenceModule: AddressLike;
    referenceModuleInitData: BytesLike;
  };

  export type PostParamsStructOutput = [
    profileId: bigint,
    contentURI: string,
    actionModules: string[],
    actionModulesInitDatas: string[],
    referenceModule: string,
    referenceModuleInitData: string
  ] & {
    profileId: bigint;
    contentURI: string;
    actionModules: string[];
    actionModulesInitDatas: string[];
    referenceModule: string;
    referenceModuleInitData: string;
  };

  export type QuoteParamsStruct = {
    profileId: BigNumberish;
    contentURI: string;
    pointedProfileId: BigNumberish;
    pointedPubId: BigNumberish;
    referrerProfileIds: BigNumberish[];
    referrerPubIds: BigNumberish[];
    referenceModuleData: BytesLike;
    actionModules: AddressLike[];
    actionModulesInitDatas: BytesLike[];
    referenceModule: AddressLike;
    referenceModuleInitData: BytesLike;
  };

  export type QuoteParamsStructOutput = [
    profileId: bigint,
    contentURI: string,
    pointedProfileId: bigint,
    pointedPubId: bigint,
    referrerProfileIds: bigint[],
    referrerPubIds: bigint[],
    referenceModuleData: string,
    actionModules: string[],
    actionModulesInitDatas: string[],
    referenceModule: string,
    referenceModuleInitData: string
  ] & {
    profileId: bigint;
    contentURI: string;
    pointedProfileId: bigint;
    pointedPubId: bigint;
    referrerProfileIds: bigint[];
    referrerPubIds: bigint[];
    referenceModuleData: string;
    actionModules: string[];
    actionModulesInitDatas: string[];
    referenceModule: string;
    referenceModuleInitData: string;
  };

  export type TokenDataStruct = {
    owner: AddressLike;
    mintTimestamp: BigNumberish;
  };

  export type TokenDataStructOutput = [owner: string, mintTimestamp: bigint] & {
    owner: string;
    mintTimestamp: bigint;
  };
}

export interface LensHubInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DANGER__disableTokenGuardian"
      | "TOKEN_GUARDIAN_COOLDOWN"
      | "act"
      | "actWithSig"
      | "approve"
      | "balanceOf"
      | "batchMigrateFollowModules"
      | "batchMigrateFollowers"
      | "batchMigrateFollows"
      | "batchMigrateProfiles"
      | "burn"
      | "changeDelegatedExecutorsConfig(uint256,address[],bool[],uint64,bool)"
      | "changeDelegatedExecutorsConfig(uint256,address[],bool[])"
      | "changeDelegatedExecutorsConfigWithSig"
      | "collectLegacy"
      | "collectLegacyWithSig"
      | "comment"
      | "commentWithSig"
      | "createProfile"
      | "emitCollectNFTTransferEvent"
      | "emitUnfollowedEvent"
      | "emitVersion"
      | "enableTokenGuardian"
      | "exists"
      | "follow"
      | "followWithSig"
      | "getApproved"
      | "getContentURI"
      | "getDelegatedExecutorsConfigNumber"
      | "getDelegatedExecutorsMaxConfigNumberSet"
      | "getDelegatedExecutorsPrevConfigNumber"
      | "getDomainSeparator"
      | "getFollowModule"
      | "getFollowNFTImpl"
      | "getFollowTokenURIContract"
      | "getGitCommit"
      | "getGovernance"
      | "getLegacyCollectNFTImpl"
      | "getModuleRegistry"
      | "getProfile"
      | "getProfileIdByHandleHash"
      | "getProfileTokenURIContract"
      | "getPublication"
      | "getPublicationType"
      | "getState"
      | "getTokenGuardianDisablingTimestamp"
      | "getTreasury"
      | "getTreasuryData"
      | "getTreasuryFee"
      | "getVersion"
      | "incrementNonce"
      | "initialize"
      | "isActionModuleEnabledInPublication"
      | "isApprovedForAll"
      | "isBlocked"
      | "isDelegatedExecutorApproved(uint256,address)"
      | "isDelegatedExecutorApproved(uint256,address,uint64)"
      | "isFollowing(uint256,address,uint256)"
      | "isFollowing(uint256,uint256)"
      | "isProfileCreatorWhitelisted"
      | "mintTimestampOf"
      | "mirror"
      | "mirrorWithSig"
      | "name"
      | "nonces"
      | "ownerOf"
      | "post"
      | "postWithSig"
      | "quote"
      | "quoteWithSig"
      | "royaltyInfo"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setBlockStatus"
      | "setBlockStatusWithSig"
      | "setEmergencyAdmin"
      | "setFollowModule"
      | "setFollowModuleWithSig"
      | "setFollowTokenURIContract"
      | "setGovernance"
      | "setMigrationAdmins"
      | "setProfileMetadataURI"
      | "setProfileMetadataURIWithSig"
      | "setProfileTokenURIContract"
      | "setRoyalty"
      | "setState"
      | "setTreasury"
      | "setTreasuryFee"
      | "supportsInterface"
      | "symbol"
      | "tokenDataOf"
      | "tokenURI"
      | "totalSupply"
      | "transferFrom"
      | "unfollow"
      | "unfollowWithSig"
      | "whitelistProfileCreator"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "ApprovalForAll"
      | "BatchMetadataUpdate"
      | "CollectNFTTransferred"
      | "LensUpgradeVersion"
      | "TokenGuardianStateChanged"
      | "Transfer"
      | "TreasuryFeeSet"
      | "TreasurySet"
      | "Unfollowed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DANGER__disableTokenGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TOKEN_GUARDIAN_COOLDOWN",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "act",
    values: [Types.PublicationActionParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "actWithSig",
    values: [Types.PublicationActionParamsStruct, Types.EIP712SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMigrateFollowModules",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMigrateFollowers",
    values: [BigNumberish[], BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMigrateFollows",
    values: [BigNumberish, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "batchMigrateProfiles",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "changeDelegatedExecutorsConfig(uint256,address[],bool[],uint64,bool)",
    values: [BigNumberish, AddressLike[], boolean[], BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDelegatedExecutorsConfig(uint256,address[],bool[])",
    values: [BigNumberish, AddressLike[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "changeDelegatedExecutorsConfigWithSig",
    values: [
      BigNumberish,
      AddressLike[],
      boolean[],
      BigNumberish,
      boolean,
      Types.EIP712SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "collectLegacy",
    values: [Types.LegacyCollectParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "collectLegacyWithSig",
    values: [Types.LegacyCollectParamsStruct, Types.EIP712SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "comment",
    values: [Types.CommentParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "commentWithSig",
    values: [Types.CommentParamsStruct, Types.EIP712SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createProfile",
    values: [Types.CreateProfileParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "emitCollectNFTTransferEvent",
    values: [BigNumberish, BigNumberish, BigNumberish, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emitUnfollowedEvent",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emitVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableTokenGuardian",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exists",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "follow",
    values: [BigNumberish, BigNumberish[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "followWithSig",
    values: [
      BigNumberish,
      BigNumberish[],
      BigNumberish[],
      BytesLike[],
      Types.EIP712SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContentURI",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatedExecutorsConfigNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatedExecutorsMaxConfigNumberSet",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatedExecutorsPrevConfigNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFollowModule",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFollowNFTImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFollowTokenURIContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGitCommit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGovernance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLegacyCollectNFTImpl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getModuleRegistry",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProfile",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileIdByHandleHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileTokenURIContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPublication",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPublicationType",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokenGuardianDisablingTimestamp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasury",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTreasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "incrementNonce",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isActionModuleEnabledInPublication",
    values: [BigNumberish, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isBlocked",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isDelegatedExecutorApproved(uint256,address)",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isDelegatedExecutorApproved(uint256,address,uint64)",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isFollowing(uint256,address,uint256)",
    values: [BigNumberish, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isFollowing(uint256,uint256)",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isProfileCreatorWhitelisted",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "mintTimestampOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mirror",
    values: [Types.MirrorParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "mirrorWithSig",
    values: [Types.MirrorParamsStruct, Types.EIP712SignatureStruct]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [AddressLike]): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "post",
    values: [Types.PostParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "postWithSig",
    values: [Types.PostParamsStruct, Types.EIP712SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [Types.QuoteParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "quoteWithSig",
    values: [Types.QuoteParamsStruct, Types.EIP712SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "royaltyInfo",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [AddressLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockStatus",
    values: [BigNumberish, BigNumberish[], boolean[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setBlockStatusWithSig",
    values: [
      BigNumberish,
      BigNumberish[],
      boolean[],
      Types.EIP712SignatureStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFollowModule",
    values: [BigNumberish, AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFollowModuleWithSig",
    values: [BigNumberish, AddressLike, BytesLike, Types.EIP712SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setFollowTokenURIContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMigrationAdmins",
    values: [AddressLike[], boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfileMetadataURI",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfileMetadataURIWithSig",
    values: [BigNumberish, string, Types.EIP712SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "setProfileTokenURIContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setRoyalty",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasury",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setTreasuryFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenDataOf",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unfollow",
    values: [BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "unfollowWithSig",
    values: [BigNumberish, BigNumberish[], Types.EIP712SignatureStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelistProfileCreator",
    values: [AddressLike, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "DANGER__disableTokenGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TOKEN_GUARDIAN_COOLDOWN",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "act", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "actWithSig", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "batchMigrateFollowModules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchMigrateFollowers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchMigrateFollows",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchMigrateProfiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "changeDelegatedExecutorsConfig(uint256,address[],bool[],uint64,bool)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDelegatedExecutorsConfig(uint256,address[],bool[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeDelegatedExecutorsConfigWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectLegacy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "collectLegacyWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "comment", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commentWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitCollectNFTTransferEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitUnfollowedEvent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableTokenGuardian",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "exists", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "follow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "followWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContentURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatedExecutorsConfigNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatedExecutorsMaxConfigNumberSet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatedExecutorsPrevConfigNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFollowModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFollowNFTImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFollowTokenURIContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGitCommit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLegacyCollectNFTImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModuleRegistry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProfile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProfileIdByHandleHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfileTokenURIContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPublicationType",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenGuardianDisablingTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "incrementNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isActionModuleEnabledInPublication",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isBlocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDelegatedExecutorApproved(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isDelegatedExecutorApproved(uint256,address,uint64)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFollowing(uint256,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFollowing(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isProfileCreatorWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintTimestampOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mirror", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mirrorWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "post", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "postWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quoteWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "royaltyInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlockStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBlockStatusWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFollowModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFollowModuleWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFollowTokenURIContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMigrationAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfileMetadataURI",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfileMetadataURIWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProfileTokenURIContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setRoyalty", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setState", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenDataOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unfollow", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unfollowWithSig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelistProfileCreator",
    data: BytesLike
  ): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    approved: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [owner: string, approved: string, tokenId: bigint];
  export interface OutputObject {
    owner: string;
    approved: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApprovalForAllEvent {
  export type InputTuple = [
    owner: AddressLike,
    operator: AddressLike,
    approved: boolean
  ];
  export type OutputTuple = [
    owner: string,
    operator: string,
    approved: boolean
  ];
  export interface OutputObject {
    owner: string;
    operator: string;
    approved: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BatchMetadataUpdateEvent {
  export type InputTuple = [fromTokenId: BigNumberish, toTokenId: BigNumberish];
  export type OutputTuple = [fromTokenId: bigint, toTokenId: bigint];
  export interface OutputObject {
    fromTokenId: bigint;
    toTokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CollectNFTTransferredEvent {
  export type InputTuple = [
    profileId: BigNumberish,
    pubId: BigNumberish,
    collectNFTId: BigNumberish,
    from: AddressLike,
    to: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    profileId: bigint,
    pubId: bigint,
    collectNFTId: bigint,
    from: string,
    to: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    profileId: bigint;
    pubId: bigint;
    collectNFTId: bigint;
    from: string;
    to: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LensUpgradeVersionEvent {
  export type InputTuple = [
    implementation: AddressLike,
    version: string,
    gitCommit: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    implementation: string,
    version: string,
    gitCommit: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    implementation: string;
    version: string;
    gitCommit: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TokenGuardianStateChangedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    enabled: boolean,
    tokenGuardianDisablingTimestamp: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    wallet: string,
    enabled: boolean,
    tokenGuardianDisablingTimestamp: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    wallet: string;
    enabled: boolean;
    tokenGuardianDisablingTimestamp: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    tokenId: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, tokenId: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    tokenId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasuryFeeSetEvent {
  export type InputTuple = [
    prevTreasuryFee: BigNumberish,
    newTreasuryFee: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    prevTreasuryFee: bigint,
    newTreasuryFee: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    prevTreasuryFee: bigint;
    newTreasuryFee: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TreasurySetEvent {
  export type InputTuple = [
    prevTreasury: AddressLike,
    newTreasury: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    prevTreasury: string,
    newTreasury: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    prevTreasury: string;
    newTreasury: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnfollowedEvent {
  export type InputTuple = [
    unfollowerProfileId: BigNumberish,
    idOfProfileUnfollowed: BigNumberish,
    transactionExecutor: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    unfollowerProfileId: bigint,
    idOfProfileUnfollowed: bigint,
    transactionExecutor: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    unfollowerProfileId: bigint;
    idOfProfileUnfollowed: bigint;
    transactionExecutor: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface LensHub extends BaseContract {
  connect(runner?: ContractRunner | null): LensHub;
  waitForDeployment(): Promise<this>;

  interface: LensHubInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DANGER__disableTokenGuardian: TypedContractMethod<[], [void], "nonpayable">;

  TOKEN_GUARDIAN_COOLDOWN: TypedContractMethod<[], [bigint], "view">;

  act: TypedContractMethod<
    [publicationActionParams: Types.PublicationActionParamsStruct],
    [string],
    "nonpayable"
  >;

  actWithSig: TypedContractMethod<
    [
      publicationActionParams: Types.PublicationActionParamsStruct,
      signature: Types.EIP712SignatureStruct
    ],
    [string],
    "nonpayable"
  >;

  approve: TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[owner: AddressLike], [bigint], "view">;

  batchMigrateFollowModules: TypedContractMethod<
    [profileIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  batchMigrateFollowers: TypedContractMethod<
    [
      followerProfileIds: BigNumberish[],
      idOfProfileFollowed: BigNumberish,
      followTokenIds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  batchMigrateFollows: TypedContractMethod<
    [
      followerProfileId: BigNumberish,
      idsOfProfileFollowed: BigNumberish[],
      followTokenIds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  batchMigrateProfiles: TypedContractMethod<
    [profileIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  burn: TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;

  "changeDelegatedExecutorsConfig(uint256,address[],bool[],uint64,bool)": TypedContractMethod<
    [
      delegatorProfileId: BigNumberish,
      delegatedExecutors: AddressLike[],
      approvals: boolean[],
      configNumber: BigNumberish,
      switchToGivenConfig: boolean
    ],
    [void],
    "nonpayable"
  >;

  "changeDelegatedExecutorsConfig(uint256,address[],bool[])": TypedContractMethod<
    [
      delegatorProfileId: BigNumberish,
      delegatedExecutors: AddressLike[],
      approvals: boolean[]
    ],
    [void],
    "nonpayable"
  >;

  changeDelegatedExecutorsConfigWithSig: TypedContractMethod<
    [
      delegatorProfileId: BigNumberish,
      delegatedExecutors: AddressLike[],
      approvals: boolean[],
      configNumber: BigNumberish,
      switchToGivenConfig: boolean,
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  collectLegacy: TypedContractMethod<
    [collectParams: Types.LegacyCollectParamsStruct],
    [bigint],
    "nonpayable"
  >;

  collectLegacyWithSig: TypedContractMethod<
    [
      collectParams: Types.LegacyCollectParamsStruct,
      signature: Types.EIP712SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;

  comment: TypedContractMethod<
    [commentParams: Types.CommentParamsStruct],
    [bigint],
    "nonpayable"
  >;

  commentWithSig: TypedContractMethod<
    [
      commentParams: Types.CommentParamsStruct,
      signature: Types.EIP712SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;

  createProfile: TypedContractMethod<
    [createProfileParams: Types.CreateProfileParamsStruct],
    [bigint],
    "nonpayable"
  >;

  emitCollectNFTTransferEvent: TypedContractMethod<
    [
      profileId: BigNumberish,
      pubId: BigNumberish,
      collectNFTId: BigNumberish,
      from: AddressLike,
      to: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  emitUnfollowedEvent: TypedContractMethod<
    [
      unfollowerProfileId: BigNumberish,
      idOfProfileUnfollowed: BigNumberish,
      transactionExecutor: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  emitVersion: TypedContractMethod<[], [void], "nonpayable">;

  enableTokenGuardian: TypedContractMethod<[], [void], "nonpayable">;

  exists: TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;

  follow: TypedContractMethod<
    [
      followerProfileId: BigNumberish,
      idsOfProfilesToFollow: BigNumberish[],
      followTokenIds: BigNumberish[],
      datas: BytesLike[]
    ],
    [bigint[]],
    "nonpayable"
  >;

  followWithSig: TypedContractMethod<
    [
      followerProfileId: BigNumberish,
      idsOfProfilesToFollow: BigNumberish[],
      followTokenIds: BigNumberish[],
      datas: BytesLike[],
      signature: Types.EIP712SignatureStruct
    ],
    [bigint[]],
    "nonpayable"
  >;

  getApproved: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  getContentURI: TypedContractMethod<
    [profileId: BigNumberish, pubId: BigNumberish],
    [string],
    "view"
  >;

  getDelegatedExecutorsConfigNumber: TypedContractMethod<
    [delegatorProfileId: BigNumberish],
    [bigint],
    "view"
  >;

  getDelegatedExecutorsMaxConfigNumberSet: TypedContractMethod<
    [delegatorProfileId: BigNumberish],
    [bigint],
    "view"
  >;

  getDelegatedExecutorsPrevConfigNumber: TypedContractMethod<
    [delegatorProfileId: BigNumberish],
    [bigint],
    "view"
  >;

  getDomainSeparator: TypedContractMethod<[], [string], "view">;

  getFollowModule: TypedContractMethod<
    [profileId: BigNumberish],
    [string],
    "view"
  >;

  getFollowNFTImpl: TypedContractMethod<[], [string], "view">;

  getFollowTokenURIContract: TypedContractMethod<[], [string], "view">;

  getGitCommit: TypedContractMethod<[], [string], "view">;

  getGovernance: TypedContractMethod<[], [string], "view">;

  getLegacyCollectNFTImpl: TypedContractMethod<[], [string], "view">;

  getModuleRegistry: TypedContractMethod<[], [string], "view">;

  getProfile: TypedContractMethod<
    [profileId: BigNumberish],
    [Types.ProfileStructOutput],
    "view"
  >;

  getProfileIdByHandleHash: TypedContractMethod<
    [handleHash: BytesLike],
    [bigint],
    "view"
  >;

  getProfileTokenURIContract: TypedContractMethod<[], [string], "view">;

  getPublication: TypedContractMethod<
    [profileId: BigNumberish, pubId: BigNumberish],
    [Types.PublicationMemoryStructOutput],
    "view"
  >;

  getPublicationType: TypedContractMethod<
    [profileId: BigNumberish, pubId: BigNumberish],
    [bigint],
    "view"
  >;

  getState: TypedContractMethod<[], [bigint], "view">;

  getTokenGuardianDisablingTimestamp: TypedContractMethod<
    [wallet: AddressLike],
    [bigint],
    "view"
  >;

  getTreasury: TypedContractMethod<[], [string], "view">;

  getTreasuryData: TypedContractMethod<[], [[string, bigint]], "view">;

  getTreasuryFee: TypedContractMethod<[], [bigint], "view">;

  getVersion: TypedContractMethod<[], [string], "view">;

  incrementNonce: TypedContractMethod<
    [increment: BigNumberish],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [name: string, symbol: string, newGovernance: AddressLike],
    [void],
    "nonpayable"
  >;

  isActionModuleEnabledInPublication: TypedContractMethod<
    [profileId: BigNumberish, pubId: BigNumberish, module: AddressLike],
    [boolean],
    "view"
  >;

  isApprovedForAll: TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;

  isBlocked: TypedContractMethod<
    [profileId: BigNumberish, byProfileId: BigNumberish],
    [boolean],
    "view"
  >;

  "isDelegatedExecutorApproved(uint256,address)": TypedContractMethod<
    [delegatorProfileId: BigNumberish, delegatedExecutor: AddressLike],
    [boolean],
    "view"
  >;

  "isDelegatedExecutorApproved(uint256,address,uint64)": TypedContractMethod<
    [
      delegatorProfileId: BigNumberish,
      delegatedExecutor: AddressLike,
      configNumber: BigNumberish
    ],
    [boolean],
    "view"
  >;

  "isFollowing(uint256,address,uint256)": TypedContractMethod<
    [
      followedProfileId: BigNumberish,
      followerAddress: AddressLike,
      arg2: BigNumberish
    ],
    [boolean],
    "view"
  >;

  "isFollowing(uint256,uint256)": TypedContractMethod<
    [followerProfileId: BigNumberish, followedProfileId: BigNumberish],
    [boolean],
    "view"
  >;

  isProfileCreatorWhitelisted: TypedContractMethod<
    [profileCreator: AddressLike],
    [boolean],
    "view"
  >;

  mintTimestampOf: TypedContractMethod<
    [tokenId: BigNumberish],
    [bigint],
    "view"
  >;

  mirror: TypedContractMethod<
    [mirrorParams: Types.MirrorParamsStruct],
    [bigint],
    "nonpayable"
  >;

  mirrorWithSig: TypedContractMethod<
    [
      mirrorParams: Types.MirrorParamsStruct,
      signature: Types.EIP712SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;

  name: TypedContractMethod<[], [string], "view">;

  nonces: TypedContractMethod<[signer: AddressLike], [bigint], "view">;

  ownerOf: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  post: TypedContractMethod<
    [postParams: Types.PostParamsStruct],
    [bigint],
    "nonpayable"
  >;

  postWithSig: TypedContractMethod<
    [
      postParams: Types.PostParamsStruct,
      signature: Types.EIP712SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;

  quote: TypedContractMethod<
    [quoteParams: Types.QuoteParamsStruct],
    [bigint],
    "nonpayable"
  >;

  quoteWithSig: TypedContractMethod<
    [
      quoteParams: Types.QuoteParamsStruct,
      signature: Types.EIP712SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;

  royaltyInfo: TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint]],
    "view"
  >;

  "safeTransferFrom(address,address,uint256)": TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  "safeTransferFrom(address,address,uint256,bytes)": TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setApprovalForAll: TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;

  setBlockStatus: TypedContractMethod<
    [
      byProfileId: BigNumberish,
      idsOfProfilesToSetBlockStatus: BigNumberish[],
      blockStatus: boolean[]
    ],
    [void],
    "nonpayable"
  >;

  setBlockStatusWithSig: TypedContractMethod<
    [
      byProfileId: BigNumberish,
      idsOfProfilesToSetBlockStatus: BigNumberish[],
      blockStatus: boolean[],
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  setEmergencyAdmin: TypedContractMethod<
    [newEmergencyAdmin: AddressLike],
    [void],
    "nonpayable"
  >;

  setFollowModule: TypedContractMethod<
    [
      profileId: BigNumberish,
      followModule: AddressLike,
      followModuleInitData: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  setFollowModuleWithSig: TypedContractMethod<
    [
      profileId: BigNumberish,
      followModule: AddressLike,
      followModuleInitData: BytesLike,
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  setFollowTokenURIContract: TypedContractMethod<
    [followTokenURIContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setGovernance: TypedContractMethod<
    [newGovernance: AddressLike],
    [void],
    "nonpayable"
  >;

  setMigrationAdmins: TypedContractMethod<
    [migrationAdmins: AddressLike[], whitelisted: boolean],
    [void],
    "nonpayable"
  >;

  setProfileMetadataURI: TypedContractMethod<
    [profileId: BigNumberish, metadataURI: string],
    [void],
    "nonpayable"
  >;

  setProfileMetadataURIWithSig: TypedContractMethod<
    [
      profileId: BigNumberish,
      metadataURI: string,
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  setProfileTokenURIContract: TypedContractMethod<
    [profileTokenURIContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setRoyalty: TypedContractMethod<
    [royaltiesInBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;

  setState: TypedContractMethod<[newState: BigNumberish], [void], "nonpayable">;

  setTreasury: TypedContractMethod<
    [newTreasury: AddressLike],
    [void],
    "nonpayable"
  >;

  setTreasuryFee: TypedContractMethod<
    [newTreasuryFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  symbol: TypedContractMethod<[], [string], "view">;

  tokenDataOf: TypedContractMethod<
    [tokenId: BigNumberish],
    [Types.TokenDataStructOutput],
    "view"
  >;

  tokenURI: TypedContractMethod<[tokenId: BigNumberish], [string], "view">;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;

  unfollow: TypedContractMethod<
    [
      unfollowerProfileId: BigNumberish,
      idsOfProfilesToUnfollow: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;

  unfollowWithSig: TypedContractMethod<
    [
      unfollowerProfileId: BigNumberish,
      idsOfProfilesToUnfollow: BigNumberish[],
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;

  whitelistProfileCreator: TypedContractMethod<
    [profileCreator: AddressLike, whitelist: boolean],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DANGER__disableTokenGuardian"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "TOKEN_GUARDIAN_COOLDOWN"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "act"
  ): TypedContractMethod<
    [publicationActionParams: Types.PublicationActionParamsStruct],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "actWithSig"
  ): TypedContractMethod<
    [
      publicationActionParams: Types.PublicationActionParamsStruct,
      signature: Types.EIP712SignatureStruct
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[owner: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "batchMigrateFollowModules"
  ): TypedContractMethod<[profileIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "batchMigrateFollowers"
  ): TypedContractMethod<
    [
      followerProfileIds: BigNumberish[],
      idOfProfileFollowed: BigNumberish,
      followTokenIds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchMigrateFollows"
  ): TypedContractMethod<
    [
      followerProfileId: BigNumberish,
      idsOfProfileFollowed: BigNumberish[],
      followTokenIds: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "batchMigrateProfiles"
  ): TypedContractMethod<[profileIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "burn"
  ): TypedContractMethod<[tokenId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "changeDelegatedExecutorsConfig(uint256,address[],bool[],uint64,bool)"
  ): TypedContractMethod<
    [
      delegatorProfileId: BigNumberish,
      delegatedExecutors: AddressLike[],
      approvals: boolean[],
      configNumber: BigNumberish,
      switchToGivenConfig: boolean
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeDelegatedExecutorsConfig(uint256,address[],bool[])"
  ): TypedContractMethod<
    [
      delegatorProfileId: BigNumberish,
      delegatedExecutors: AddressLike[],
      approvals: boolean[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "changeDelegatedExecutorsConfigWithSig"
  ): TypedContractMethod<
    [
      delegatorProfileId: BigNumberish,
      delegatedExecutors: AddressLike[],
      approvals: boolean[],
      configNumber: BigNumberish,
      switchToGivenConfig: boolean,
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collectLegacy"
  ): TypedContractMethod<
    [collectParams: Types.LegacyCollectParamsStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "collectLegacyWithSig"
  ): TypedContractMethod<
    [
      collectParams: Types.LegacyCollectParamsStruct,
      signature: Types.EIP712SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "comment"
  ): TypedContractMethod<
    [commentParams: Types.CommentParamsStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "commentWithSig"
  ): TypedContractMethod<
    [
      commentParams: Types.CommentParamsStruct,
      signature: Types.EIP712SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createProfile"
  ): TypedContractMethod<
    [createProfileParams: Types.CreateProfileParamsStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitCollectNFTTransferEvent"
  ): TypedContractMethod<
    [
      profileId: BigNumberish,
      pubId: BigNumberish,
      collectNFTId: BigNumberish,
      from: AddressLike,
      to: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitUnfollowedEvent"
  ): TypedContractMethod<
    [
      unfollowerProfileId: BigNumberish,
      idOfProfileUnfollowed: BigNumberish,
      transactionExecutor: AddressLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emitVersion"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableTokenGuardian"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exists"
  ): TypedContractMethod<[tokenId: BigNumberish], [boolean], "view">;
  getFunction(
    nameOrSignature: "follow"
  ): TypedContractMethod<
    [
      followerProfileId: BigNumberish,
      idsOfProfilesToFollow: BigNumberish[],
      followTokenIds: BigNumberish[],
      datas: BytesLike[]
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "followWithSig"
  ): TypedContractMethod<
    [
      followerProfileId: BigNumberish,
      idsOfProfilesToFollow: BigNumberish[],
      followTokenIds: BigNumberish[],
      datas: BytesLike[],
      signature: Types.EIP712SignatureStruct
    ],
    [bigint[]],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getApproved"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getContentURI"
  ): TypedContractMethod<
    [profileId: BigNumberish, pubId: BigNumberish],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getDelegatedExecutorsConfigNumber"
  ): TypedContractMethod<[delegatorProfileId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDelegatedExecutorsMaxConfigNumberSet"
  ): TypedContractMethod<[delegatorProfileId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDelegatedExecutorsPrevConfigNumber"
  ): TypedContractMethod<[delegatorProfileId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDomainSeparator"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFollowModule"
  ): TypedContractMethod<[profileId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getFollowNFTImpl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getFollowTokenURIContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGitCommit"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getGovernance"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getLegacyCollectNFTImpl"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getModuleRegistry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getProfile"
  ): TypedContractMethod<
    [profileId: BigNumberish],
    [Types.ProfileStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProfileIdByHandleHash"
  ): TypedContractMethod<[handleHash: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProfileTokenURIContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getPublication"
  ): TypedContractMethod<
    [profileId: BigNumberish, pubId: BigNumberish],
    [Types.PublicationMemoryStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPublicationType"
  ): TypedContractMethod<
    [profileId: BigNumberish, pubId: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getState"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTokenGuardianDisablingTimestamp"
  ): TypedContractMethod<[wallet: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTreasury"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getTreasuryData"
  ): TypedContractMethod<[], [[string, bigint]], "view">;
  getFunction(
    nameOrSignature: "getTreasuryFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "incrementNonce"
  ): TypedContractMethod<[increment: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [name: string, symbol: string, newGovernance: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isActionModuleEnabledInPublication"
  ): TypedContractMethod<
    [profileId: BigNumberish, pubId: BigNumberish, module: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isApprovedForAll"
  ): TypedContractMethod<
    [owner: AddressLike, operator: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isBlocked"
  ): TypedContractMethod<
    [profileId: BigNumberish, byProfileId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isDelegatedExecutorApproved(uint256,address)"
  ): TypedContractMethod<
    [delegatorProfileId: BigNumberish, delegatedExecutor: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isDelegatedExecutorApproved(uint256,address,uint64)"
  ): TypedContractMethod<
    [
      delegatorProfileId: BigNumberish,
      delegatedExecutor: AddressLike,
      configNumber: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isFollowing(uint256,address,uint256)"
  ): TypedContractMethod<
    [
      followedProfileId: BigNumberish,
      followerAddress: AddressLike,
      arg2: BigNumberish
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isFollowing(uint256,uint256)"
  ): TypedContractMethod<
    [followerProfileId: BigNumberish, followedProfileId: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isProfileCreatorWhitelisted"
  ): TypedContractMethod<[profileCreator: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "mintTimestampOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "mirror"
  ): TypedContractMethod<
    [mirrorParams: Types.MirrorParamsStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "mirrorWithSig"
  ): TypedContractMethod<
    [
      mirrorParams: Types.MirrorParamsStruct,
      signature: Types.EIP712SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "name"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "nonces"
  ): TypedContractMethod<[signer: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "ownerOf"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "post"
  ): TypedContractMethod<
    [postParams: Types.PostParamsStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "postWithSig"
  ): TypedContractMethod<
    [
      postParams: Types.PostParamsStruct,
      signature: Types.EIP712SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "quote"
  ): TypedContractMethod<
    [quoteParams: Types.QuoteParamsStruct],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "quoteWithSig"
  ): TypedContractMethod<
    [
      quoteParams: Types.QuoteParamsStruct,
      signature: Types.EIP712SignatureStruct
    ],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "royaltyInfo"
  ): TypedContractMethod<
    [tokenId: BigNumberish, salePrice: BigNumberish],
    [[string, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256)"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "safeTransferFrom(address,address,uint256,bytes)"
  ): TypedContractMethod<
    [
      from: AddressLike,
      to: AddressLike,
      tokenId: BigNumberish,
      _data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setApprovalForAll"
  ): TypedContractMethod<
    [operator: AddressLike, approved: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBlockStatus"
  ): TypedContractMethod<
    [
      byProfileId: BigNumberish,
      idsOfProfilesToSetBlockStatus: BigNumberish[],
      blockStatus: boolean[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setBlockStatusWithSig"
  ): TypedContractMethod<
    [
      byProfileId: BigNumberish,
      idsOfProfilesToSetBlockStatus: BigNumberish[],
      blockStatus: boolean[],
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEmergencyAdmin"
  ): TypedContractMethod<
    [newEmergencyAdmin: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFollowModule"
  ): TypedContractMethod<
    [
      profileId: BigNumberish,
      followModule: AddressLike,
      followModuleInitData: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFollowModuleWithSig"
  ): TypedContractMethod<
    [
      profileId: BigNumberish,
      followModule: AddressLike,
      followModuleInitData: BytesLike,
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFollowTokenURIContract"
  ): TypedContractMethod<
    [followTokenURIContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setGovernance"
  ): TypedContractMethod<[newGovernance: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setMigrationAdmins"
  ): TypedContractMethod<
    [migrationAdmins: AddressLike[], whitelisted: boolean],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProfileMetadataURI"
  ): TypedContractMethod<
    [profileId: BigNumberish, metadataURI: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProfileMetadataURIWithSig"
  ): TypedContractMethod<
    [
      profileId: BigNumberish,
      metadataURI: string,
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProfileTokenURIContract"
  ): TypedContractMethod<
    [profileTokenURIContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setRoyalty"
  ): TypedContractMethod<
    [royaltiesInBasisPoints: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setState"
  ): TypedContractMethod<[newState: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasury"
  ): TypedContractMethod<[newTreasury: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setTreasuryFee"
  ): TypedContractMethod<[newTreasuryFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "symbol"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "tokenDataOf"
  ): TypedContractMethod<
    [tokenId: BigNumberish],
    [Types.TokenDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "tokenURI"
  ): TypedContractMethod<[tokenId: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, tokenId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unfollow"
  ): TypedContractMethod<
    [
      unfollowerProfileId: BigNumberish,
      idsOfProfilesToUnfollow: BigNumberish[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unfollowWithSig"
  ): TypedContractMethod<
    [
      unfollowerProfileId: BigNumberish,
      idsOfProfilesToUnfollow: BigNumberish[],
      signature: Types.EIP712SignatureStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "whitelistProfileCreator"
  ): TypedContractMethod<
    [profileCreator: AddressLike, whitelist: boolean],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "ApprovalForAll"
  ): TypedContractEvent<
    ApprovalForAllEvent.InputTuple,
    ApprovalForAllEvent.OutputTuple,
    ApprovalForAllEvent.OutputObject
  >;
  getEvent(
    key: "BatchMetadataUpdate"
  ): TypedContractEvent<
    BatchMetadataUpdateEvent.InputTuple,
    BatchMetadataUpdateEvent.OutputTuple,
    BatchMetadataUpdateEvent.OutputObject
  >;
  getEvent(
    key: "CollectNFTTransferred"
  ): TypedContractEvent<
    CollectNFTTransferredEvent.InputTuple,
    CollectNFTTransferredEvent.OutputTuple,
    CollectNFTTransferredEvent.OutputObject
  >;
  getEvent(
    key: "LensUpgradeVersion"
  ): TypedContractEvent<
    LensUpgradeVersionEvent.InputTuple,
    LensUpgradeVersionEvent.OutputTuple,
    LensUpgradeVersionEvent.OutputObject
  >;
  getEvent(
    key: "TokenGuardianStateChanged"
  ): TypedContractEvent<
    TokenGuardianStateChangedEvent.InputTuple,
    TokenGuardianStateChangedEvent.OutputTuple,
    TokenGuardianStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "TreasuryFeeSet"
  ): TypedContractEvent<
    TreasuryFeeSetEvent.InputTuple,
    TreasuryFeeSetEvent.OutputTuple,
    TreasuryFeeSetEvent.OutputObject
  >;
  getEvent(
    key: "TreasurySet"
  ): TypedContractEvent<
    TreasurySetEvent.InputTuple,
    TreasurySetEvent.OutputTuple,
    TreasurySetEvent.OutputObject
  >;
  getEvent(
    key: "Unfollowed"
  ): TypedContractEvent<
    UnfollowedEvent.InputTuple,
    UnfollowedEvent.OutputTuple,
    UnfollowedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "ApprovalForAll(address,address,bool)": TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;
    ApprovalForAll: TypedContractEvent<
      ApprovalForAllEvent.InputTuple,
      ApprovalForAllEvent.OutputTuple,
      ApprovalForAllEvent.OutputObject
    >;

    "BatchMetadataUpdate(uint256,uint256)": TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;
    BatchMetadataUpdate: TypedContractEvent<
      BatchMetadataUpdateEvent.InputTuple,
      BatchMetadataUpdateEvent.OutputTuple,
      BatchMetadataUpdateEvent.OutputObject
    >;

    "CollectNFTTransferred(uint256,uint256,uint256,address,address,uint256)": TypedContractEvent<
      CollectNFTTransferredEvent.InputTuple,
      CollectNFTTransferredEvent.OutputTuple,
      CollectNFTTransferredEvent.OutputObject
    >;
    CollectNFTTransferred: TypedContractEvent<
      CollectNFTTransferredEvent.InputTuple,
      CollectNFTTransferredEvent.OutputTuple,
      CollectNFTTransferredEvent.OutputObject
    >;

    "LensUpgradeVersion(address,string,bytes20,uint256)": TypedContractEvent<
      LensUpgradeVersionEvent.InputTuple,
      LensUpgradeVersionEvent.OutputTuple,
      LensUpgradeVersionEvent.OutputObject
    >;
    LensUpgradeVersion: TypedContractEvent<
      LensUpgradeVersionEvent.InputTuple,
      LensUpgradeVersionEvent.OutputTuple,
      LensUpgradeVersionEvent.OutputObject
    >;

    "TokenGuardianStateChanged(address,bool,uint256,uint256)": TypedContractEvent<
      TokenGuardianStateChangedEvent.InputTuple,
      TokenGuardianStateChangedEvent.OutputTuple,
      TokenGuardianStateChangedEvent.OutputObject
    >;
    TokenGuardianStateChanged: TypedContractEvent<
      TokenGuardianStateChangedEvent.InputTuple,
      TokenGuardianStateChangedEvent.OutputTuple,
      TokenGuardianStateChangedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "TreasuryFeeSet(uint16,uint16,uint256)": TypedContractEvent<
      TreasuryFeeSetEvent.InputTuple,
      TreasuryFeeSetEvent.OutputTuple,
      TreasuryFeeSetEvent.OutputObject
    >;
    TreasuryFeeSet: TypedContractEvent<
      TreasuryFeeSetEvent.InputTuple,
      TreasuryFeeSetEvent.OutputTuple,
      TreasuryFeeSetEvent.OutputObject
    >;

    "TreasurySet(address,address,uint256)": TypedContractEvent<
      TreasurySetEvent.InputTuple,
      TreasurySetEvent.OutputTuple,
      TreasurySetEvent.OutputObject
    >;
    TreasurySet: TypedContractEvent<
      TreasurySetEvent.InputTuple,
      TreasurySetEvent.OutputTuple,
      TreasurySetEvent.OutputObject
    >;

    "Unfollowed(uint256,uint256,address,uint256)": TypedContractEvent<
      UnfollowedEvent.InputTuple,
      UnfollowedEvent.OutputTuple,
      UnfollowedEvent.OutputObject
    >;
    Unfollowed: TypedContractEvent<
      UnfollowedEvent.InputTuple,
      UnfollowedEvent.OutputTuple,
      UnfollowedEvent.OutputObject
    >;
  };
}
